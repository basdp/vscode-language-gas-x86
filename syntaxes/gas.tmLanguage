<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>s</string>
		<string>S</string>
		<string>sx</string>
	</array>
	<key>name</key>
	<string>GAS/AT&amp;T x86/x64</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>I may organize these later based on processor additions. Please investigate pop/pushq_cfi instructions.</string>
			<key>match</key>
			<string>\b(?i:aa[adms]|adc[bwlq]?|x?add[bwlq]?|and[bwlq]?|arpl|bound[wl]?|bs[fr][wlq]?|bswap[lq]?|bt[crs]?[wlq]?|call[wlq]?|clc|cld|cli|cltd[dqw]?|clts|cmc|cmov(n?[abgl]e?|n?[ceosz]|np|p[eo]?)?[lqw]?|cmp[bwlq]?|cmps[bwdlq]?|cmpxchg[bwlq]?|cmpxchg(8|16)b|cpuid|c[lw]td[bwlq]?|daa|das|dec[bwlq]?|div[bwlq]?|enter[wl]?|esc|hlt|idiv[bwlq]?|imul[bwlq]?|in[bwlq]?|inc[bwlq]?|insd?[bwlq]?|int(\s*3|o)?|inv(d|pcid)?|invlpg|iret[dfwq]?|j(n?[abgl]e?|n?[ceosz]|np|p[eo]?)|jmp[lq]?|j[er]?cxz|[ls]ahf|lar|lcall[wlq]?|l[d-gs]s[wl]|lea[bwlq]?|leave[lwq]?|l[defgs]s|[ls][gil]dt[wl]?|ljmp[wl]?|lmsw|loadall|lods[bwdlq]?|loop(n?[ez][dw]?)?|loopw|lret|lsl|ltr|mov((s?(b[lwq]?|w[lq]?|lq?|q)?)|(z?(b[lwq]|w[lq]|l|q)))?|movd|movabs[bwlq]?A?|movs(x?d|w)|mov[sz]x[bwl]?|movzb|mul[bwlq]?|neg[bwlq]?|nop|not[bwlq]?|x?or[bwlq]?|out[bwlq]?|outs[bdwl]?|pop[bwlq]?|popal?|pop[af]d|popf[wlq]?|push[bwlq]?|pushal?|push[af]d|pushf[wlq]?|rc[lr][bwlq]?|(rd|wr)msr|rdtscp?|ret[fw]?[ql]?|ro[lr][bwlq]?|rsm|sa[lr][bwlq]?|sbb[bwlq]?|scas[bwdlq]?|set(n?[abgl]e?|n?[ceosz]|np|p[eo]?)b?|sh[lr]d?[bwlq]?|smsw|stc|std|sti|stos[bdqlw]?|str|sub[bwlq]?|swapgs|syscall|sysret|sysenter|sysexit|test[bwlq]?|ud1|ud2[ab]?|ver[rw]|fwait|wbinvd|xchg[bwlq]?A?|x[gs]etbv|xlatb?|xsave[cs]?(64)?|xrstors?(64)?)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.instructions</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Data type conversions. Apparently the Intel ones work too. I tried it.</string>
			<key>match</key>
			<string>\b(?i:cbw|cdqe?|cwde?|cdo|cqo|cbtw|cwt[ld]|clt[dq]|cqto)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.conversion.instructions</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Not really instructions.</string>
			<key>match</key>
			<string>\b(?i:rep(n?[ez])?|[c-gs]s|(addr|data)(16|32)|lock|wait|rex(64(xyz)?)?)(?!:)\b</string>
			<key>name</key>
			<string>keyword.name.function.prefixes</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i mmx</string>
			<key>match</key>
			<string>\b(?i:emms|movdq|mov[dq]b|pack(ssdw|[us]swb)|padd([bdw]|u?s[bw])|pandn?|pcmp(eq|gt)[bdw]|pmaddwd|pmul[hl]w|psll[dqw]|psr(a[dw]|l[dqw])|psub([bdw]|u?s[bw])|punpck[hl](bw|dq|wd)|px?or|rdpmc)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.mmx_instructions</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'sse ext'</string>
			<key>match</key>
			<string>\b(?i:maskmovq|movntps|movntq|prefetcht[012]|prefetchnta|sfence)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.sse</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'sse ext'</string>
			<key>match</key>
			<string>\b(?i:add[sp]s|cmp[ps]s|u?comiss|cvt(p(i2ps|s2pi)|s(i2ss|s2sd)q?|t(ps2pi|s[sd]2siq?))|div[ps]s|ldmxcsr|(max|min)[ps]s|mov(a|hl?|lh?|msk|nt)ps|v?mov(s|up)s|mul[ps]s|rcp[ps]s|r?sqrt[ps]s|shufps|stmxcsr|sub[ps]s|unpck[hl]ps|andn?ps|x?orps|pavg[bw]|pextrw|pminsrw|p(max|min)(sw|ub)|pmovmskb|pmulhuw|psadbw|pshufw)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.sse_simd</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'sse2'</string>
			<key>match</key>
			<string>\b(?i:clflush|[lm]fence|maskmovdqu|v?movnt(dq|i[lw]?|pd)|pause)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.sse2</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'sse2'</string>
			<key>match</key>
			<string>\b(?i:v?add[ps][ds]|andn?pd|bzhi[wl]?|cmp[ps]d|u?comisd|cvtdq2p[ds]|cvtt?pd2(dq|pi)|cvtpd2ps|cvtp[is]2pd|cvtt?ps2dq|cvtt?sd2s[is]|cvts[is]2sd|div[ps][ds]|v?(max|min)[ps][ds]|v?mov[ahlu]pd|v?movmskpd|v?mul[ps]d|x?orpd|shufpd|sqrt[ps]d|sub[ps]d|unpck[hl]pd|unpcklpd|movdq(2q|[au])|movq2dq|paddq|psubq|pmuludq|pshuf([hl]w|d)|ps[lr]ldq|punpck[hl]qdq)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.sse2_simd</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'pni/sse3'</string>
			<key>match</key>
			<string>\b(?i:lddqu|monitor|mwait)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.sse3</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'ssse3'</string>
			<key>match</key>
			<string>\b(?i:addsubp[ds]|haddp[ds]|hsubp[ds]|v?mov(d|s[hl])dup|psign[bdw]|pshufb|pmulhrsw|pmaddubsw|phsub(s?w|d)|phadd(s?w|d)|palignr|pabs[bdw])(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.xsse3_simd</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'sse4'</string>
			<key>match</key>
			<string>\b(?i:v?mpsadbw|phminposuw|pmul(ld|dq)|dpp[ds]|blendv?p[ds]|pblendvb|pblendw|pswapd|p(max|min)(s[bd]|u[wd])|roundp[ds]|rounds[ds]|insertps|pinsr[bwdq]|extractps|pextr[bdq]|pmov[sz]xb[dwq]|pmov[sz]xw[dq]|pmov[sz]xdq|pmov[sz]x|ptest|pcmpeqq|packusdw|v?movntdqa|lzcnt|popcnt|extrq|insertq|movnts[ds]|crc32|pcmp[ei]str[im]|pcmpgtq)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.sse4_simd</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i x87</string>
			<key>match</key>
			<string>\b(?i:f(2xm1|abs|add[psl]?|bld|b?stp|chs|n?clex|fcomp?l|u?comp{0,2}|decstp|n?disi|divr?[psl]?|n?eni|nsetpm|rstpm|free(p|\s*ST)?|iadd[sl]?|icomp?|idivr?[sl]?|ildl?|imul[sl]?|incstp|n?init|ist((pl?|l)|tp)?|isubr?[sl]?|ld[1slt]?|ldcw|ldenv[dw]?|ldl2[et]|ldl[gn]2|ldpi|ldz|mul[psl]?|nop|n?stenv[wd]?|n?stsw|pa?tan|prem1?|rndint|rstor[dw]?|n?savew?|scale|sqrt|st(p?[slt])|n?stcw|subr?[psl]?|tst|wait|xam|xch|xtract|yl2x(p1)?|setpm|cos|saved|sin(cos)?|cmovn?b?e?|cmovn?u|u?comip?|xrstor(64)?|xsave(64)?))(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.fpu_x87</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i aes</string>
			<key>match</key>
			<string>\b(?i:v?aes(en|de)c(last)?|v?aeskeygenassist|aesimc)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.aes_functions</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep SHA</string>
			<key>match</key>
			<string>\b(?i:sha((1|256)msg[12]|1nexte|1rnds4|256rnds2))(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.sha_functions</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'bmi i'</string>
			<key>match</key>
			<string>\b(?i:andn[lq]?|bextr[lq]?|blsi[lq]?|blsmsk[lq]?|blsr[dlq]?|tzcnt[wlq]?)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.bmi1</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'bmi2'</string>
			<key>match</key>
			<string>\b(?i:mulx[lq]?|pdep[lq]?|pext[lq]?|rorx[lq]?|s(h[lr]|ar)x)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.bmi2</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'adx'</string>
			<key>match</key>
			<string>\b(?i:ad[co]x)l?(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.adx</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'clmul'</string>
			<key>match</key>
			<string>\b(?i:pclmulqdq)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.clmul</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep 'PREFETCHW'</string>
			<key>match</key>
			<string>\b(?i:prefetchw(t1)?)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.prefetchwt</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep '3dnow' ???</string>
			<key>match</key>
			<string>\b(?i:prefetch|femms|pavgusb|pf2id|pfacc|pfadd|pfcmpeq|pfcmpge|pfcmpgt|pfmax|pfmin|pfmul|pfrcp|pfrcpit[12]|pfrsqit1|pfrsqrt|pfsubr?|pi2fd|pmulhrw)\b</string>
			<key>name</key>
			<string>entity.name.function.amd3DNow</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Pretty sure this is AMD specific.</string>
			<key>match</key>
			<string>\b(nop[lwq])</string>
			<key>name</key>
			<string>entity.name.function.amdnops</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'clflush i'</string>
			<key>match</key>
			<string>\b(?i:clflushopt)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.clflushopt</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'rdseed'</string>
			<key>match</key>
			<string>\b(?i:rdseed)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.rdseed</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'mpx'</string>
			<key>match</key>
			<string>\b(?i:bnd(c[uln]|mk|stx))(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.mpx</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'fsgs'</string>
			<key>match</key>
			<string>\b(?i:(rd|wr)[fg]sbase)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.fsgsbase</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'rdrand'</string>
			<key>match</key>
			<string>\b(?i:rdrand)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.rdrand</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'avx:'</string>
			<key>match</key>
			<string>\b(?i:vadd(sub)?p[ds]|vandn?p[ds]|vblendv?p[ds]|vbroadcastf128|vbroadcasts[ds]|vroundp[ds]|vcmp[ps][ds]|vcvtdq2p[ds]|vcvtpd2(dq|ps)[xy]?|vcvtps2(dq|pd)|vcvttpd2dq[xy]?|vcvttps2dq|vdivp[ds]|vdpps|vextractf128|vh(add|sub)p[ds]|vinsertf128|vlddqu|vmovap[ds]|vmovd(q[au])?|vmovup[ds]|vmaskmovp[ds]|v(max|min)p[ds]|vmov(d|s[hl])?dup|vmovmskp[ds]|vmulp[ds]|vx?orp[ds]|vpermilp[ds]|vperm2f128|vrcpps|vrsqrtps|vpxor|vshufp[ds]|vsqrtp[ds]|vmovntp[ds]|vmovntdq|vsubp[ds]|vtestp[ds]|vptest|vunpck[lh]p[ds]|vzero(all|upper)|vpcmp[ei]str[im])(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.AVX</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'avx2'</string>
			<key>match</key>
			<string>\b(?i:vpabs[bdw]|vpadd[bdqw]|vpaddu?s[bw]|vpalignr|vpandn?|vpavg[bw]|vpblend[dw]|vpblendvb|vpbroadcast[bdqw]|movddup|vbroadcasts[ds]|vbroadcasti128|vps[lr]ldq|vpcmp(eq|gt)[bdqw]|vpmovsx(wd|wq|dq|bw)|v(extract|insert)i128|vperm2i128|vph(add|sub)(d|s?w)|vpmaskmov[dq]|vpmovmskb|vpor|vpsign[bdw]|vp(ext|ins)rq|vphminposuw|vaesimc)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.AVX2</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'avx512'</string>
			<key>match</key>
			<string>\b(?i:vpabs[bdqw]|vpandn?[dq]|vpadd[bdwq]|valignq|vpblendm[bdqw]|vbroadcast[if]32x[248]|vbroadcast[if]64x[24]|vpbroadcastm(b2q|w2d)|vpcmpu?[bdqw]|vcomis[ds]|vpcompress[dq]|vcompressp[ds]|vpconflict[dq]|vcvtqq2ps[xy]?|vcvtqq2pd|vcvtudq2p[ds]|vcvtuqq2pd|vcvtuqq2ps[xy]|vcvtsi2sd|vcvtsi2ssl?|vcvtt?p[ds]2u?[dq]q|vcvtt?sd2(u?si|s[is])|vcvtss2u?si|vcvtss2s[di]|vcvtusi2s[sd]l?|vpmov[sz]x(w[dq]|dq|b[wdq])|vpmovu?s?(wb|d[wb]|q[wdb])|vcvtts[ds]2u?si|vdbpsadbw|vdiv[ps][ds]|vexp2p[ds]|vpexpand[dq]|vexpandp[ds]|v(extract|insert)[fi]32x[48]|v(extract|insert)[if]64x[24]|vfixupimm[ps][ds]|vfpclassp[ds][xyz]?|vfpclasss[ds]|vgetexp[ps][ds]|vgetmant[ps][ds]|vp?(gather|scatter)[dq](ps|[qd]|pd)|kandn?w|kmovw|knotw|k(xn?)?orw|kortestw|kunpck(bw|dq|wd)|vmovq|vmovdqa(32|64)|vmovs[ds]|vmovdqu(8|16|32|64)|vplzcnt[dq]|vpmadd(wd|52[hl]uq|ubsw)|vp(max|min)[su][bdqw]|vpmov[bdqw]2m|vpmovm2[bdqw]|vpmulu?dq|vmulss|vpmulhu?w|vpmulhrsw|vpmull[dqw]|vpmultishiftqb|vpor[dq]|vpack[us]s(wb|dw)|vperm[bdqw]|vpermp[ds]|vperm[it]2[bdqw]|vperm[it]2p[ds]|v(gather|scatter)pf[01][dq]p[ds]|v(range|reduce)[ps][ds]|vrcp(14|28)[ps][ds]|vpro[lr]v?[dq]|vrndscale[ps][ds]|vrsqrt(14|28)[ps][ds]|vpsadbw|vscalef[ps][ds]|vpxor[dq]|vpshuf[bd]|vshuf[if]32x4|vshuf[if]64x2|vpshuf[hl]w|vpsllv?[wdq]|vsqrts[ds]|vpsr[al]v?[dqw]|vpsub[bdqw]|vsubs[ds]|vpsubu?s[bw]|vpternlog[dq]|vptestn?m[bdqw]|vpunpck[hl](wd|q?dq|bw)|vpxord|vucomis[ds]|vcvtpd2udq[xy]|vpclmul[lh]q[lh]qdq)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.AVX512</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:k(andn?|or|xn?or|not|ortest|test|shift[rl]w?|mov[qd]|add)[dq]|cmp(eq|le|lt|neq|nle[p]s|nlt|ord|unord)[ps]s)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.AVX512BW</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:k(andn?b|orb|xn?orb|notb|ortestb|test[bw]|shift[rl]b|movb|add[bw])[bw])(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.AVX512DQ</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'f16c'</string>
			<key>match</key>
			<string>\b(?i:vcvt(ph2ps|ps2ph))(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.F16c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'fma'</string>
			<key>match</key>
			<string>\b(?i:vfn?m((add(sub)?|sub(add)?)((132|213|231)?[ps][ds])))(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.FMA</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'avx512'</string>
			<key>match</key>
			<string>\b(?i:vpandn?[dq]|vpad[cd]d|vaddn?p[ds]|vpaddset[cs]d|vaddsetsps|valignd|vpblendm[dq]|vblendmp[ds]|clevict[01]|vpcmpu?d)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.KNC</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'rtm'</string>
			<key>match</key>
			<string>\b(?i:x(abort|begin|end|test))(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.RTM</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'HLE'</string>
			<key>match</key>
			<string>\b(?i:x(acquire|release|test))(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.HLE</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpuid | grep -i 'xsaveopt'</string>
			<key>match</key>
			<string>\b(?i:xsaveopt(64)?)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.xsave</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Passed in thru compiler opts, I think.</string>
			<key>match</key>
			<string>\b(?i:crc32[bwlq])(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.crc32</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>I don't know where these are supposed to go.</string>
			<key>match</key>
			<string>\b(?i:xstorerng|vmxoff|getsec|vpclmulqdq|movbe|invept|invvpid|vmload|blcfill|v(ld|st)mxcsr)(?!:)\b</string>
			<key>name</key>
			<string>entity.name.function.miscellaneous</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^\s*##.*$</string>
			<key>name</key>
			<string>comment.define</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Non-instructions. Often params to pseudo-ops.</string>
			<key>match</key>
			<string>(#(alloc|write|execinstr|exclude|tls)|@((prog|no)bits|note|((pre)?init|fini)_array)|[#@%]((gnu_indirect_)?function|(tls_)?object|common|notype|gnu_unique_object)|comdat|\.gnu\.linkonce|discard|one_only|same_(size|contents)|STT_((GNU_I)?FUNC|OBJECT|TLS|COMMON|NOTYPE))\b</string>
			<key>name</key>
			<string>variable.parameter.other_keywords</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(#|//).*$</string>
			<key>name</key>
			<string>comment.assembly</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\s*/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.multiline</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^[ \t]*/.*$</string>
			<key>name</key>
			<string>comment.slashes</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Assembly label/symbols.</string>
			<key>match</key>
			<string>((\s+|^)([A-Za-z$_.0-9]|C-[BA])+[:])</string>
			<key>name</key>
			<string>keyword.label.assembly</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.symbol</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Alternative ways of writing the .set and .eqv directives.</string>
			<key>match</key>
			<string>\b(?&lt;!\.if )([A-Za-z$_.0-9]+)\s*(==?)\s*</string>
			<key>name</key>
			<string>support.constant.alternatives</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>H8/300, Renesas/SuperH SH, and AMD 29K: use prefix 0[DFPRSX]. ARC: 0[DFRS]. Intel 960: 0[DFT]. HPPA: 0[E] (Captial E only. Others don't matter.)</string>
			<key>match</key>
			<string>(?&lt;!\w)(?i)0[DFT][+-]?(\d+(\.\d*)|\.\d+)(e[+-]?[0-9]+)?</string>
			<key>name</key>
			<string>constant.numeric.float</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>See above for details.</string>
			<key>match</key>
			<string>(?&lt;!\w)[$](?i)0[DFT][+-]?(\d+(\.\d*)|\.\d+)(e[+-]?[0-9]+)?</string>
			<key>name</key>
			<string>constant.other.float</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-+~]?(?i)(0x)[A-F0-9]+\b</string>
			<key>name</key>
			<string>constant.numeric.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-+~]?(?i)(0x)[A-F0-9]+\b</string>
			<key>name</key>
			<string>constant.other.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-+~]?(0[Bb])[01]+\b</string>
			<key>name</key>
			<string>constant.numeric.binary</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-+~]?(0[Bb])[01]+\b</string>
			<key>name</key>
			<string>constant.other.binary</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[-+~]?0[0-7]*\b</string>
			<key>name</key>
			<string>constant.numeric.octal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-+~]?0[0-7]*\b</string>
			<key>name</key>
			<string>constant.other.octal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>By the way, the ~ is a bitwise not. I decided to put the two prefix operators together.</string>
			<key>match</key>
			<string>(?&lt;!\w)[-+~]?(\d+(\.\d*)?|\.\d+)(e[+-]?[0-9]+)?(?=[-\s,;&lt;&gt;/+~$%()]|$)</string>
			<key>name</key>
			<string>constant.numeric.decimal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$][-+~]?(\d+(\.\d*)?|\.\d+)(e[+-]?[0-9]+)?(?=[-\s,;&lt;&gt;/+~$%(){}]|$)</string>
			<key>name</key>
			<string>constant.other.decimal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)[$]?(?i)'([!-\[\]-~]|\\([\\bfnrt]|x[0-9a-f]{1,2}|[0-9]{3}))(?!')</string>
			<key>name</key>
			<string>constant.character</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Note that delimiting strings by any other means besides the double quotes are forbidden unless .altmacro is present or --alternate flag is given to as. ! means next char is a literal, useful for delimiters.</string>
			<key>match</key>
			<string>(".*?(?&lt;![^\\][\\])"|&lt;.*?(?&lt;![^\\][\\])&gt;)</string>
			<key>name</key>
			<string>string.quoted</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Registers case insensitive. Not sure about some of these (Like the last few). I found some on Wikipedia.</string>
			<key>match</key>
			<string>%\s*(?i:[er]?[a-d]x|[a-d][lh]|[re]?s[ip]|s[ip]l|[re]?di|dil|[re]?bp|bpl|[c-gs]s|[re]?ip|e?flags|db([0236-9]|1[0-5]?)|tr[0267]?|st(\([01-7]\))?|esp[0-2]|[xy]?mm([02-9]|1[0-5]?)|zmm([4-9]|[12][0-9]?|3[10]?)|xmcrt|[gli]dtr|[cd]r([02-9]|1[0-5]?)|msr|r([89]|1[0-5])[dwb]?|[cst]w|fp_([id]p|[cd]s|opc)|mxcsr|msw)\b</string>
			<key>name</key>
			<string>variable.parameter.registers</string>
		</dict>
		<dict>
			<key>match</key>
			<string>%\s*(k[0-7])\b</string>
			<key>name</key>
			<string>variable.parameter.opmaskregs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>%\s*[er]iz\b</string>
			<key>name</key>
			<string>invalid.weirdland.eiz</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:movz(lq)?)\b</string>
			<key>name</key>
			<string>invalid.instructions</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>You probably won't be using these anyway... but still. Good to have reminders, I guess?</string>
			<key>match</key>
			<string>(?&lt;!\w)\.(?i:abort|line|ln|loc_mark_blocks|intel_syntax(\s*(no)?prefix)?|att_syntax\s*noprefix)\b</string>
			<key>name</key>
			<string>invalid.directives</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Pseudo-ops, directives, or subsection markers.</string>
			<key>match</key>
			<string>(?&lt;!\w)(?i:\.(allow_index_reg|app-file|asci[iz]|b?align|bundle_(align_mode|(un)?lock)|bss|[42]?byte|cfi_(sections|startproc|endproc|personality|lsda|def_cfa|def_cfa_register|def_cfa_offset|adjust_cfa_offset|offset|rel_offset|register|restore|undefined|same_value|remember_state|return_column|signal_frame|window_save|escape|val_encoded_addr)|code(16(gcc)?|32|64)|data|def|desc|dim|double|eject|else(if)?|end([ei]f|func|[mr])?|exitm|equ(iv)?|eqv|err(or)?|extern|fail|file|fill|t?float|globa?l|hidden|hword|ident|if(def|eqs?|[gl][et]|n?[bc]|n(ot)?def|nes?)?|incbin|include|int(ernal)?|irpc?|l?comm|lflags|linkonce|loc(_mark_labels|al)?|mri|(no)?list|long|macro|(no)?altmacro|octa|operand_check|org|p2align[wl]?|(pop|push)?section|previous|print|protected|p?size|purgem|quad|rept|sbttl|scl|set|secrel32|short|single|skip|sleb128|space|sse_check|stab[dns]|string(8|16|32|64)?|struct|subsection|symver|tag|text|title|type|uleb128|val(ue)?|version|vtable_(entry|inherit)|warning|weak(ref)?|word|zero|att_syntax(\s*prefix)?)\b)|(LOCAL\b)</string>
			<key>name</key>
			<string>support.constant.subsections</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.arch</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;!\w)\.(?i:(arch) (i8086|i[1-6]86|pentium(pro|iii?|4)?|prescott|nocona|core(2|i7)?|[lk]1om|k6(_2)?|athlon|k8|amdfam10|bdver[1-3]|btver[12]|generic(32|64)|.(8087|[32]87|mmx|sse([235]|4(\.[12]|a)?)?|ssse3|avx[2]?|[vs]mx|ept|clflush|movbe|xsave(opt)?|aes|pclmul|fma|fsgsbase|rdrnd|f16c|bmi2|lzcnt|invpcid|vmfunc|hle|rtm|adx|rdseed|prfchw|smap|mpx|sha|3dnowa?|syscall|rdtscp|svme|abm|lwp|fma4|xop|cx16|padlock|avx512(p?f|cd|er)?)))(,\s*(no)?jumps)?</string>
			<key>name</key>
			<string>support.constant.arch_specification</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.x86</string>
	<key>uuid</key>
	<string>245288b9-8026-4e7f-8b27-d4ff081a25bf</string>
</dict>
</plist>
